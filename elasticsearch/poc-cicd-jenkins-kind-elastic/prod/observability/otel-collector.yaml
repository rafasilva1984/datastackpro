apiVersion: v1
kind: Namespace
metadata:
  name: observability
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: observability
data:
  config.yaml: |
    receivers:
      otlp:
        protocols: { grpc: {}, http: {} }
    processors: { batch: {} }
    exporters:
      otlphttp/elastic:
        endpoint: ${APM_ENDPOINT}
        headers:
          Authorization: "ApiKey ${APM_API_KEY}"
        compression: gzip
    service:
      pipelines:
        traces: { receivers: [otlp], processors: [batch], exporters: [otlphttp/elastic] }
        metrics: { receivers: [otlp], processors: [batch], exporters: [otlphttp/elastic] }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: observability
spec:
  replicas: 2
  selector: { matchLabels: { app: otel-collector } }
  template:
    metadata:
      labels: { app: otel-collector }
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector:0.107.0
        args: ["--config=/etc/otelcol/config.yaml"]
        envFrom:
        - secretRef: { name: elastic-apm }
        volumeMounts:
        - name: cfg
          mountPath: /etc/otelcol
        ports:
        - name: grpc
          containerPort: 4317
        - name: http
          containerPort: 4318
      volumes:
      - name: cfg
        configMap:
          name: otel-collector-config
          items: [{ key: config.yaml, path: config.yaml }]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: observability
spec:
  selector: { app: otel-collector }
  ports:
  - name: grpc
    port: 4317
    targetPort: 4317
  - name: http
    port: 4318
    targetPort: 4318
