# docker-compose.yml (sem 'version:' para evitar warning)
networks:
  obs-net:

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
  tempo-data:
  esdata:
  sampleapp-logs:
  zbx-pgdata:        # <-- NOVO volume p/ Postgres do Zabbix

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports: ["9200:9200","9300:9300"]
    volumes: [ esdata:/usr/share/elasticsearch/data ]
    networks: [obs-net]
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_PUBLICBASEURL=http://localhost:5601
    ports: ["5601:5601"]
    depends_on: [elasticsearch]
    networks: [obs-net]
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.2
    container_name: filebeat
    user: root
    command: ["-e","-strict.perms=false"]
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - sampleapp-logs:/var/log/sampleapp:ro
    depends_on: [elasticsearch, sampleapp]
    networks: [obs-net]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    ports: ["9090:9090"]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro   # << regras montadas
      - prometheus-data:/prometheus
    networks: [obs-net]
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    command: ["--config.file=/etc/alertmanager/config.yml"]
    ports: ["9093:9093"]
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/config.yml:ro
    networks: [obs-net]
    restart: unless-stopped

  grafana:
    build:
      context: ./grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/zabbix:/var/lib/grafana/plugins/alexanderzobnin-zabbix-app
    depends_on: [prometheus, loki, tempo, elasticsearch]
    networks: [obs-net]
    restart: unless-stopped


  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports: ["3100:3100"]
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks: [obs-net]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
      - sampleapp-logs:/var/log/sampleapp:ro
    depends_on: [loki]
    networks: [obs-net]
    restart: unless-stopped

  tempo-init:
    image: busybox:1.36
    container_name: tempo-init
    command: sh -c "mkdir -p /tmp/tempo/blocks /tmp/tempo/wal && chmod -R 777 /tmp/tempo"
    volumes:
      - tempo-data:/tmp/tempo
    networks: [obs-net]
    restart: "no"

  tempo:
    image: grafana/tempo:2.5.0
    container_name: tempo
    command: ["-config.file=/etc/tempo/config.yaml"]
    ports:
      - "3200:3200"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./tempo/config.yaml:/etc/tempo/config.yaml:ro
      - tempo-data:/tmp/tempo
    depends_on: [tempo-init]
    networks: [obs-net]
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.104.0
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    ports:
      - "8889:8889"  # telemetry do collector
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol/config.yaml:ro
    depends_on: [tempo]
    networks: [obs-net]
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports: ["8080:8080"]
    networks: [obs-net]
    restart: unless-stopped

  sampleapp:
    build: ./sampleapp
    container_name: sampleapp
    environment:
      - SERVICE_NAME=sampleapp
      - NODE_ENV=production
      - APP_PORT=3000
      - LOG_DIR=/var/log/sampleapp
      - LOG_FILE=/var/log/sampleapp/app.log
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=sampleapp
      - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0,deployment.environment=demo
    ports: ["3001:3000"]
    volumes:
      - sampleapp-logs:/var/log/sampleapp
    depends_on: [otel-collector]
    networks: [obs-net]
    restart: unless-stopped

  predictor:
    build: ./predictor
    container_name: predictor
    environment:
      - PROM_URL=http://prometheus:9090
      - TARGET_EXPR=rate(sampleapp_http_requests_total[5m])
      - TARGET_THRESHOLD=50
      - POLL_SECONDS=60
    ports: ["8000:8000"]
    depends_on: [prometheus]
    networks: [obs-net]
    restart: unless-stopped

  loadgen:
    build:
      context: ./loadgen
    container_name: loadgen
    environment:
      - SLEEP_SECONDS=1
    depends_on: [sampleapp]
    networks: [obs-net]
    restart: unless-stopped

  # =========================
  # Zabbix (Infra on-prem)
  # =========================
  zbx-db:
    image: postgres:15-alpine
    container_name: zbx-db
    environment:
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix
      POSTGRES_DB: zabbix
    volumes:
      - zbx-pgdata:/var/lib/postgresql/data
    networks: [obs-net]
    restart: unless-stopped

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-6.4-latest
    container_name: zabbix-server
    environment:
      DB_SERVER_HOST: zbx-db
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix
      POSTGRES_DB: zabbix
    depends_on: [zbx-db]
    ports:
      - "10051:10051"   # server para agentes/proxies
    networks: [obs-net]
    restart: unless-stopped

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-6.4-latest
    container_name: zabbix-web
    environment:
      DB_SERVER_HOST: zbx-db
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix
      POSTGRES_DB: zabbix
      ZBX_SERVER_HOST: zabbix-server
      PHP_TZ: America/Sao_Paulo
    depends_on: [zabbix-server, zbx-db]
    ports:
      - "8081:8080"     # UI do Zabbix (usei 8081 pra nÃ£o bater com cadvisor 8080)
    networks: [obs-net]
    restart: unless-stopped

  # 5 agentes para simular hosts
  zbx-agent1:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-agent1
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - ZBX_SERVER_PORT=10051
      - ZBX_ACTIVE_ALLOW=1
      - ZBX_HOSTNAME=agent1
    depends_on: [zabbix-server]
    networks: [obs-net]
    restart: unless-stopped

  zbx-agent2:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-agent2
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - ZBX_SERVER_PORT=10051
      - ZBX_ACTIVE_ALLOW=1
      - ZBX_HOSTNAME=agent2
    depends_on: [zabbix-server]
    networks: [obs-net]
    restart: unless-stopped

  zbx-agent3:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-agent3
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - ZBX_SERVER_PORT=10051
      - ZBX_ACTIVE_ALLOW=1
      - ZBX_HOSTNAME=agent3
    depends_on: [zabbix-server]
    networks: [obs-net]
    restart: unless-stopped

  zbx-agent4:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-agent4
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - ZBX_SERVER_PORT=10051
      - ZBX_ACTIVE_ALLOW=1
      - ZBX_HOSTNAME=agent4
    depends_on: [zabbix-server]
    networks: [obs-net]
    restart: unless-stopped

  zbx-agent5:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-agent5
    environment:
      - ZBX_SERVER_HOST=zabbix-server
      - ZBX_SERVER_PORT=10051
      - ZBX_ACTIVE_ALLOW=1
      - ZBX_HOSTNAME=agent5
    depends_on: [zabbix-server]
    networks: [obs-net]
    restart: unless-stopped

  # Seeder: cria grupo/hosts/itens trapper via API
  zbx-seeder:
    image: curlimages/curl:8.10.1
    container_name: zbx-seeder
    depends_on: [zabbix-web, zabbix-server]
    environment:
      - ZBX_URL=http://zabbix-web:8080/api_jsonrpc.php
      - ZBX_USER=Admin
      - ZBX_PASS=zabbix
      - ZBX_HOSTS=agent1,agent2,agent3,agent4,agent5
      - ZBX_GROUP=Demo Hosts
      - ZBX_TEMPLATE=Linux by Zabbix agent
    volumes:
      - ./zabbix/seeder/seed_zabbix.sh:/seed/seed_zabbix.sh:ro
    entrypoint: [ "sh", "/seed/seed_zabbix.sh" ]
    networks: [obs-net]
    restart: "no"

  # Flooder: injeta dados nos itens trapper
  zbx-flood:
    image: zabbix/zabbix-agent2:alpine-6.4-latest
    container_name: zbx-flood
    depends_on: [zabbix-server, zbx-seeder]
    entrypoint: [ "sh", "-lc" ]
    command: >
      'while :; do
         for h in agent1 agent2 agent3 agent4 agent5; do
           v=$((RANDOM % 100));
           zabbix_sender -z zabbix-server -p 10051 -s "$$h" -k custom.trapper.random -o "$$v" >/dev/null 2>&1;
         done;
         sleep 1;
       done'
    networks: [obs-net]
    restart: unless-stopped
